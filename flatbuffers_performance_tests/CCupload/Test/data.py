# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Test

import flatbuffers

class data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsdata(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = data()
        x.Init(buf, n + offset)
        return x

    # data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # data
    def Datetime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # data
    def Sample(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .accelData import accelData
            obj = accelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dataStart(builder): builder.StartObject(2)
def dataAddDatetime(builder, datetime): builder.PrependInt64Slot(0, datetime, 0)
def dataAddSample(builder, sample): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sample), 0)
def dataEnd(builder): return builder.EndObject()
